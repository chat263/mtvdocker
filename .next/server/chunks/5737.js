"use strict";exports.id=5737,exports.ids=[5737],exports.modules={35737:(e,t,i)=>{i.d(t,{db:()=>p,cF:()=>d});var s=i(75703);function a(e){return String(e)}async function n(e,t=3){for(let i=0;i<t;i++)try{return await e()}catch(s){let e=i===t-1;if((s.message?.includes("Connection")||s.message?.includes("ECONNREFUSED")||s.message?.includes("ENOTFOUND")||"ECONNRESET"===s.code||"EPIPE"===s.code)&&!e){console.log(`Redis operation failed, retrying... (${i+1}/${t})`),console.error("Error:",s.message),await new Promise(e=>setTimeout(e,1e3*(i+1)));try{let e=l();e.isOpen||await e.connect()}catch(e){console.error("Failed to reconnect:",e)}continue}throw s}throw Error("Max retries exceeded")}class r{constructor(){this.client=l()}prKey(e,t){return`u:${e}:pr:${t}`}async getPlayRecord(e,t){let i=await n(()=>this.client.get(this.prKey(e,t)));return i?JSON.parse(i):null}async setPlayRecord(e,t,i){await n(()=>this.client.set(this.prKey(e,t),JSON.stringify(i)))}async getAllPlayRecords(e){let t=`u:${e}:pr:*`,i=await n(()=>this.client.keys(t));if(0===i.length)return{};let s=await n(()=>this.client.mGet(i)),r={};return i.forEach((t,i)=>{let n=s[i];if(n){let i=JSON.parse(n);r[a(t.replace(`u:${e}:pr:`,""))]=i}}),r}async deletePlayRecord(e,t){await n(()=>this.client.del(this.prKey(e,t)))}favKey(e,t){return`u:${e}:fav:${t}`}async getFavorite(e,t){let i=await n(()=>this.client.get(this.favKey(e,t)));return i?JSON.parse(i):null}async setFavorite(e,t,i){await n(()=>this.client.set(this.favKey(e,t),JSON.stringify(i)))}async getAllFavorites(e){let t=`u:${e}:fav:*`,i=await n(()=>this.client.keys(t));if(0===i.length)return{};let s=await n(()=>this.client.mGet(i)),r={};return i.forEach((t,i)=>{let n=s[i];if(n){let i=JSON.parse(n);r[a(t.replace(`u:${e}:fav:`,""))]=i}}),r}async deleteFavorite(e,t){await n(()=>this.client.del(this.favKey(e,t)))}userPwdKey(e){return`u:${e}:pwd`}async registerUser(e,t){await n(()=>this.client.set(this.userPwdKey(e),t))}async verifyUser(e,t){let i=await n(()=>this.client.get(this.userPwdKey(e)));return null!==i&&a(i)===t}async checkUserExist(e){return 1===await n(()=>this.client.exists(this.userPwdKey(e)))}async changePassword(e,t){await n(()=>this.client.set(this.userPwdKey(e),t))}async deleteUser(e){await n(()=>this.client.del(this.userPwdKey(e))),await n(()=>this.client.del(this.shKey(e)));let t=`u:${e}:pr:*`,i=await n(()=>this.client.keys(t));i.length>0&&await n(()=>this.client.del(i));let s=`u:${e}:fav:*`,a=await n(()=>this.client.keys(s));a.length>0&&await n(()=>this.client.del(a));let r=`u:${e}:skip:*`,l=await n(()=>this.client.keys(r));l.length>0&&await n(()=>this.client.del(l))}shKey(e){return`u:${e}:sh`}async getSearchHistory(e){return(await n(()=>this.client.lRange(this.shKey(e),0,-1))).map(e=>String(e))}async addSearchHistory(e,t){let i=this.shKey(e);await n(()=>this.client.lRem(i,0,a(t))),await n(()=>this.client.lPush(i,a(t))),await n(()=>this.client.lTrim(i,0,19))}async deleteSearchHistory(e,t){let i=this.shKey(e);t?await n(()=>this.client.lRem(i,0,a(t))):await n(()=>this.client.del(i))}async getAllUsers(){return(await n(()=>this.client.keys("u:*:pwd"))).map(e=>{let t=e.match(/^u:(.+?):pwd$/);return t?a(t[1]):void 0}).filter(e=>"string"==typeof e)}adminConfigKey(){return"admin:config"}async getAdminConfig(){let e=await n(()=>this.client.get(this.adminConfigKey()));return e?JSON.parse(e):null}async setAdminConfig(e){await n(()=>this.client.set(this.adminConfigKey(),JSON.stringify(e)))}skipConfigKey(e,t,i){return`u:${e}:skip:${t}+${i}`}async getSkipConfig(e,t,i){let s=await n(()=>this.client.get(this.skipConfigKey(e,t,i)));return s?JSON.parse(s):null}async setSkipConfig(e,t,i,s){await n(()=>this.client.set(this.skipConfigKey(e,t,i),JSON.stringify(s)))}async deleteSkipConfig(e,t,i){await n(()=>this.client.del(this.skipConfigKey(e,t,i)))}async getAllSkipConfigs(e){let t=`u:${e}:skip:*`,i=await n(()=>this.client.keys(t));if(0===i.length)return{};let s={},a=await n(()=>this.client.mGet(i));return i.forEach((e,t)=>{let i=a[t];if(i){let t=e.match(/^u:.+?:skip:(.+)$/);t&&(s[t[1]]=JSON.parse(i))}}),s}async clearAllData(){try{for(let e of(await this.getAllUsers()))await this.deleteUser(e);await n(()=>this.client.del(this.adminConfigKey())),console.log("所有数据已清空")}catch(e){throw console.error("清空数据失败:",e),Error("清空数据失败")}}}function l(){let e=Symbol.for("__MOONTV_REDIS_CLIENT__"),t=global[e];if(!t){let i=process.env.REDIS_URL;if(!i)throw Error("REDIS_URL env variable not set");(t=(0,s.createClient)({url:i,socket:{reconnectStrategy:e=>(console.log(`Redis reconnection attempt ${e+1}`),e>10)?(console.error("Redis max reconnection attempts exceeded"),!1):Math.min(1e3*Math.pow(2,e),3e4),connectTimeout:1e4,noDelay:!0},pingInterval:3e4})).on("error",e=>{console.error("Redis client error:",e)}),t.on("connect",()=>{console.log("Redis connected")}),t.on("reconnecting",()=>{console.log("Redis reconnecting...")}),t.on("ready",()=>{console.log("Redis ready")});let a=async()=>{try{await t.connect(),console.log("Redis connected successfully")}catch(e){console.error("Redis initial connection failed:",e),console.log("Will retry in 5 seconds..."),setTimeout(a,5e3)}};a(),global[e]=t}return t}var c=i(58426);function o(e){return String(e)}async function h(e,t=3){for(let i=0;i<t;i++)try{return await e()}catch(s){let e=i===t-1;if((s.message?.includes("Connection")||s.message?.includes("ECONNREFUSED")||s.message?.includes("ENOTFOUND")||"ECONNRESET"===s.code||"EPIPE"===s.code||"UpstashError"===s.name)&&!e){console.log(`Upstash Redis operation failed, retrying... (${i+1}/${t})`),console.error("Error:",s.message),await new Promise(e=>setTimeout(e,1e3*(i+1)));continue}throw s}throw Error("Max retries exceeded")}class y{constructor(){this.client=function(){let e=Symbol.for("__MOONTV_UPSTASH_REDIS_CLIENT__"),t=global[e];if(!t){let i=process.env.UPSTASH_URL,s=process.env.UPSTASH_TOKEN;if(!i||!s)throw Error("UPSTASH_URL and UPSTASH_TOKEN env variables must be set");t=new c.s({url:i,token:s,retry:{retries:3,backoff:e=>Math.min(1e3*Math.pow(2,e),3e4)}}),console.log("Upstash Redis client created successfully"),global[e]=t}return t}()}prKey(e,t){return`u:${e}:pr:${t}`}async getPlayRecord(e,t){return await h(()=>this.client.get(this.prKey(e,t)))||null}async setPlayRecord(e,t,i){await h(()=>this.client.set(this.prKey(e,t),i))}async getAllPlayRecords(e){let t=`u:${e}:pr:*`,i=await h(()=>this.client.keys(t));if(0===i.length)return{};let s={};for(let t of i){let i=await h(()=>this.client.get(t));i&&(s[o(t.replace(`u:${e}:pr:`,""))]=i)}return s}async deletePlayRecord(e,t){await h(()=>this.client.del(this.prKey(e,t)))}favKey(e,t){return`u:${e}:fav:${t}`}async getFavorite(e,t){return await h(()=>this.client.get(this.favKey(e,t)))||null}async setFavorite(e,t,i){await h(()=>this.client.set(this.favKey(e,t),i))}async getAllFavorites(e){let t=`u:${e}:fav:*`,i=await h(()=>this.client.keys(t));if(0===i.length)return{};let s={};for(let t of i){let i=await h(()=>this.client.get(t));i&&(s[o(t.replace(`u:${e}:fav:`,""))]=i)}return s}async deleteFavorite(e,t){await h(()=>this.client.del(this.favKey(e,t)))}userPwdKey(e){return`u:${e}:pwd`}async registerUser(e,t){await h(()=>this.client.set(this.userPwdKey(e),t))}async verifyUser(e,t){let i=await h(()=>this.client.get(this.userPwdKey(e)));return null!==i&&o(i)===t}async checkUserExist(e){return 1===await h(()=>this.client.exists(this.userPwdKey(e)))}async changePassword(e,t){await h(()=>this.client.set(this.userPwdKey(e),t))}async deleteUser(e){await h(()=>this.client.del(this.userPwdKey(e))),await h(()=>this.client.del(this.shKey(e)));let t=`u:${e}:pr:*`,i=await h(()=>this.client.keys(t));i.length>0&&await h(()=>this.client.del(...i));let s=`u:${e}:fav:*`,a=await h(()=>this.client.keys(s));a.length>0&&await h(()=>this.client.del(...a));let n=`u:${e}:skip:*`,r=await h(()=>this.client.keys(n));r.length>0&&await h(()=>this.client.del(...r))}shKey(e){return`u:${e}:sh`}async getSearchHistory(e){return(await h(()=>this.client.lrange(this.shKey(e),0,-1))).map(e=>String(e))}async addSearchHistory(e,t){let i=this.shKey(e);await h(()=>this.client.lrem(i,0,o(t))),await h(()=>this.client.lpush(i,o(t))),await h(()=>this.client.ltrim(i,0,19))}async deleteSearchHistory(e,t){let i=this.shKey(e);t?await h(()=>this.client.lrem(i,0,o(t))):await h(()=>this.client.del(i))}async getAllUsers(){return(await h(()=>this.client.keys("u:*:pwd"))).map(e=>{let t=e.match(/^u:(.+?):pwd$/);return t?o(t[1]):void 0}).filter(e=>"string"==typeof e)}adminConfigKey(){return"admin:config"}async getAdminConfig(){return await h(()=>this.client.get(this.adminConfigKey()))||null}async setAdminConfig(e){await h(()=>this.client.set(this.adminConfigKey(),e))}skipConfigKey(e,t,i){return`u:${e}:skip:${t}+${i}`}async getSkipConfig(e,t,i){return await h(()=>this.client.get(this.skipConfigKey(e,t,i)))||null}async setSkipConfig(e,t,i,s){await h(()=>this.client.set(this.skipConfigKey(e,t,i),s))}async deleteSkipConfig(e,t,i){await h(()=>this.client.del(this.skipConfigKey(e,t,i)))}async getAllSkipConfigs(e){let t=`u:${e}:skip:*`,i=await h(()=>this.client.keys(t));if(0===i.length)return{};let s={},a=await h(()=>this.client.mget(i));return i.forEach((e,t)=>{let i=a[t];if(i){let t=e.match(/^u:.+?:skip:(.+)$/);t&&(s[t[1]]=i)}}),s}async clearAllData(){try{for(let e of(await this.getAllUsers()))await this.deleteUser(e);await h(()=>this.client.del(this.adminConfigKey())),console.log("所有数据已清空")}catch(e){throw console.error("清空数据失败:",e),Error("清空数据失败")}}}let g=process.env.NEXT_PUBLIC_STORAGE_TYPE||"localstorage",u=null;function d(){return u||(u=function(){switch(g){case"redis":return new r;case"upstash":return new y;default:return null}}()),u}function f(e,t){return`${e}+${t}`}class w{constructor(){this.storage=d()}async getPlayRecord(e,t,i){let s=f(t,i);return this.storage.getPlayRecord(e,s)}async savePlayRecord(e,t,i,s){let a=f(t,i);await this.storage.setPlayRecord(e,a,s)}async getAllPlayRecords(e){return this.storage.getAllPlayRecords(e)}async deletePlayRecord(e,t,i){let s=f(t,i);await this.storage.deletePlayRecord(e,s)}async getFavorite(e,t,i){let s=f(t,i);return this.storage.getFavorite(e,s)}async saveFavorite(e,t,i,s){let a=f(t,i);await this.storage.setFavorite(e,a,s)}async getAllFavorites(e){return this.storage.getAllFavorites(e)}async deleteFavorite(e,t,i){let s=f(t,i);await this.storage.deleteFavorite(e,s)}async isFavorited(e,t,i){return null!==await this.getFavorite(e,t,i)}async registerUser(e,t){await this.storage.registerUser(e,t)}async verifyUser(e,t){return this.storage.verifyUser(e,t)}async checkUserExist(e){return this.storage.checkUserExist(e)}async getSearchHistory(e){return this.storage.getSearchHistory(e)}async addSearchHistory(e,t){await this.storage.addSearchHistory(e,t)}async deleteSearchHistory(e,t){await this.storage.deleteSearchHistory(e,t)}async getAllUsers(){return"function"==typeof this.storage.getAllUsers?this.storage.getAllUsers():[]}async getAdminConfig(){return"function"==typeof this.storage.getAdminConfig?this.storage.getAdminConfig():null}async saveAdminConfig(e){"function"==typeof this.storage.setAdminConfig&&await this.storage.setAdminConfig(e)}async getSkipConfig(e,t,i){return"function"==typeof this.storage.getSkipConfig?this.storage.getSkipConfig(e,t,i):null}async setSkipConfig(e,t,i,s){"function"==typeof this.storage.setSkipConfig&&await this.storage.setSkipConfig(e,t,i,s)}async deleteSkipConfig(e,t,i){"function"==typeof this.storage.deleteSkipConfig&&await this.storage.deleteSkipConfig(e,t,i)}async getAllSkipConfigs(e){return"function"==typeof this.storage.getAllSkipConfigs?this.storage.getAllSkipConfigs(e):{}}async clearAllData(){if("function"==typeof this.storage.clearAllData)await this.storage.clearAllData();else throw Error("存储类型不支持清空数据操作")}}let p=new w}};