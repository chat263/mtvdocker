"use strict";exports.id=7690,exports.ids=[7690],exports.modules={97690:(t,e,i)=>{i.d(e,{db:()=>f});var s=i(75703);function r(t){return String(t)}class a{constructor(t,e){var i,r;this.client=function(t,e){let i=global[e];if(!i){if(!t.url)throw Error(`${t.clientName}_URL env variable not set`);let r={url:t.url,socket:{reconnectStrategy:e=>(console.log(`${t.clientName} reconnection attempt ${e+1}`),e>10)?(console.error(`${t.clientName} max reconnection attempts exceeded`),!1):Math.min(1e3*Math.pow(2,e),3e4),connectTimeout:1e4,noDelay:!0},pingInterval:3e4};(i=(0,s.createClient)(r)).on("error",e=>{console.error(`${t.clientName} client error:`,e)}),i.on("connect",()=>{console.log(`${t.clientName} connected`)}),i.on("reconnecting",()=>{console.log(`${t.clientName} reconnecting...`)}),i.on("ready",()=>{console.log(`${t.clientName} ready`)});let a=async()=>{try{await i.connect(),console.log(`${t.clientName} connected successfully`)}catch(e){console.error(`${t.clientName} initial connection failed:`,e),console.log("Will retry in 5 seconds..."),setTimeout(a,5e3)}};a(),global[e]=i}return i}(t,e),this.withRetry=(i=t.clientName,r=()=>this.client,async function(t,e=3){for(let s=0;s<e;s++)try{return await t()}catch(a){let t=s===e-1;if((a.message?.includes("Connection")||a.message?.includes("ECONNREFUSED")||a.message?.includes("ENOTFOUND")||"ECONNRESET"===a.code||"EPIPE"===a.code)&&!t){console.log(`${i} operation failed, retrying... (${s+1}/${e})`),console.error("Error:",a.message),await new Promise(t=>setTimeout(t,1e3*(s+1)));try{let t=r();t.isOpen||await t.connect()}catch(t){console.error("Failed to reconnect:",t)}continue}throw a}throw Error("Max retries exceeded")})}prKey(t,e){return`u:${t}:pr:${e}`}async getPlayRecord(t,e){let i=await this.withRetry(()=>this.client.get(this.prKey(t,e)));return i?JSON.parse(i):null}async setPlayRecord(t,e,i){await this.withRetry(()=>this.client.set(this.prKey(t,e),JSON.stringify(i)))}async getAllPlayRecords(t){let e=`u:${t}:pr:*`,i=await this.withRetry(()=>this.client.keys(e));if(0===i.length)return{};let s=await this.withRetry(()=>this.client.mGet(i)),a={};return i.forEach((e,i)=>{let n=s[i];if(n){let i=JSON.parse(n);a[r(e.replace(`u:${t}:pr:`,""))]=i}}),a}async deletePlayRecord(t,e){await this.withRetry(()=>this.client.del(this.prKey(t,e)))}favKey(t,e){return`u:${t}:fav:${e}`}async getFavorite(t,e){let i=await this.withRetry(()=>this.client.get(this.favKey(t,e)));return i?JSON.parse(i):null}async setFavorite(t,e,i){await this.withRetry(()=>this.client.set(this.favKey(t,e),JSON.stringify(i)))}async getAllFavorites(t){let e=`u:${t}:fav:*`,i=await this.withRetry(()=>this.client.keys(e));if(0===i.length)return{};let s=await this.withRetry(()=>this.client.mGet(i)),a={};return i.forEach((e,i)=>{let n=s[i];if(n){let i=JSON.parse(n);a[r(e.replace(`u:${t}:fav:`,""))]=i}}),a}async deleteFavorite(t,e){await this.withRetry(()=>this.client.del(this.favKey(t,e)))}userPwdKey(t){return`u:${t}:pwd`}async registerUser(t,e){await this.withRetry(()=>this.client.set(this.userPwdKey(t),e))}async verifyUser(t,e){let i=await this.withRetry(()=>this.client.get(this.userPwdKey(t)));return null!==i&&r(i)===e}async checkUserExist(t){return 1===await this.withRetry(()=>this.client.exists(this.userPwdKey(t)))}async changePassword(t,e){await this.withRetry(()=>this.client.set(this.userPwdKey(t),e))}async deleteUser(t){await this.withRetry(()=>this.client.del(this.userPwdKey(t))),await this.withRetry(()=>this.client.del(this.shKey(t)));let e=`u:${t}:pr:*`,i=await this.withRetry(()=>this.client.keys(e));i.length>0&&await this.withRetry(()=>this.client.del(i));let s=`u:${t}:fav:*`,r=await this.withRetry(()=>this.client.keys(s));r.length>0&&await this.withRetry(()=>this.client.del(r));let a=`u:${t}:skip:*`,n=await this.withRetry(()=>this.client.keys(a));n.length>0&&await this.withRetry(()=>this.client.del(n))}shKey(t){return`u:${t}:sh`}async getSearchHistory(t){return(await this.withRetry(()=>this.client.lRange(this.shKey(t),0,-1))).map(t=>String(t))}async addSearchHistory(t,e){let i=this.shKey(t);await this.withRetry(()=>this.client.lRem(i,0,r(e))),await this.withRetry(()=>this.client.lPush(i,r(e))),await this.withRetry(()=>this.client.lTrim(i,0,19))}async deleteSearchHistory(t,e){let i=this.shKey(t);e?await this.withRetry(()=>this.client.lRem(i,0,r(e))):await this.withRetry(()=>this.client.del(i))}async getAllUsers(){return(await this.withRetry(()=>this.client.keys("u:*:pwd"))).map(t=>{let e=t.match(/^u:(.+?):pwd$/);return e?r(e[1]):void 0}).filter(t=>"string"==typeof t)}adminConfigKey(){return"admin:config"}async getAdminConfig(){let t=await this.withRetry(()=>this.client.get(this.adminConfigKey()));return t?JSON.parse(t):null}async setAdminConfig(t){await this.withRetry(()=>this.client.set(this.adminConfigKey(),JSON.stringify(t)))}skipConfigKey(t,e,i){return`u:${t}:skip:${e}+${i}`}async getSkipConfig(t,e,i){let s=await this.withRetry(()=>this.client.get(this.skipConfigKey(t,e,i)));return s?JSON.parse(s):null}async setSkipConfig(t,e,i,s){await this.withRetry(()=>this.client.set(this.skipConfigKey(t,e,i),JSON.stringify(s)))}async deleteSkipConfig(t,e,i){await this.withRetry(()=>this.client.del(this.skipConfigKey(t,e,i)))}async getAllSkipConfigs(t){let e=`u:${t}:skip:*`,i=await this.withRetry(()=>this.client.keys(e));if(0===i.length)return{};let s={},r=await this.withRetry(()=>this.client.mGet(i));return i.forEach((t,e)=>{let i=r[e];if(i){let e=t.match(/^u:.+?:skip:(.+)$/);e&&(s[e[1]]=JSON.parse(i))}}),s}async clearAllData(){try{for(let t of(await this.getAllUsers()))await this.deleteUser(t);await this.withRetry(()=>this.client.del(this.adminConfigKey())),console.log("所有数据已清空")}catch(t){throw console.error("清空数据失败:",t),Error("清空数据失败")}}}class n extends a{constructor(){super({url:process.env.KVROCKS_URL,clientName:"Kvrocks"},Symbol.for("__MOONTV_KVROCKS_CLIENT__"))}}class l extends a{constructor(){super({url:process.env.REDIS_URL,clientName:"Redis"},Symbol.for("__MOONTV_REDIS_CLIENT__"))}}var c=i(58426);function o(t){return String(t)}async function h(t,e=3){for(let i=0;i<e;i++)try{return await t()}catch(s){let t=i===e-1;if((s.message?.includes("Connection")||s.message?.includes("ECONNREFUSED")||s.message?.includes("ENOTFOUND")||"ECONNRESET"===s.code||"EPIPE"===s.code||"UpstashError"===s.name)&&!t){console.log(`Upstash Redis operation failed, retrying... (${i+1}/${e})`),console.error("Error:",s.message),await new Promise(t=>setTimeout(t,1e3*(i+1)));continue}throw s}throw Error("Max retries exceeded")}class y{constructor(){this.client=function(){let t=Symbol.for("__MOONTV_UPSTASH_REDIS_CLIENT__"),e=global[t];if(!e){let i=process.env.UPSTASH_URL,s=process.env.UPSTASH_TOKEN;if(!i||!s)throw Error("UPSTASH_URL and UPSTASH_TOKEN env variables must be set");e=new c.s({url:i,token:s,retry:{retries:3,backoff:t=>Math.min(1e3*Math.pow(2,t),3e4)}}),console.log("Upstash Redis client created successfully"),global[t]=e}return e}()}prKey(t,e){return`u:${t}:pr:${e}`}async getPlayRecord(t,e){return await h(()=>this.client.get(this.prKey(t,e)))||null}async setPlayRecord(t,e,i){await h(()=>this.client.set(this.prKey(t,e),i))}async getAllPlayRecords(t){let e=`u:${t}:pr:*`,i=await h(()=>this.client.keys(e));if(0===i.length)return{};let s={};for(let e of i){let i=await h(()=>this.client.get(e));i&&(s[o(e.replace(`u:${t}:pr:`,""))]=i)}return s}async deletePlayRecord(t,e){await h(()=>this.client.del(this.prKey(t,e)))}favKey(t,e){return`u:${t}:fav:${e}`}async getFavorite(t,e){return await h(()=>this.client.get(this.favKey(t,e)))||null}async setFavorite(t,e,i){await h(()=>this.client.set(this.favKey(t,e),i))}async getAllFavorites(t){let e=`u:${t}:fav:*`,i=await h(()=>this.client.keys(e));if(0===i.length)return{};let s={};for(let e of i){let i=await h(()=>this.client.get(e));i&&(s[o(e.replace(`u:${t}:fav:`,""))]=i)}return s}async deleteFavorite(t,e){await h(()=>this.client.del(this.favKey(t,e)))}userPwdKey(t){return`u:${t}:pwd`}async registerUser(t,e){await h(()=>this.client.set(this.userPwdKey(t),e))}async verifyUser(t,e){let i=await h(()=>this.client.get(this.userPwdKey(t)));return null!==i&&o(i)===e}async checkUserExist(t){return 1===await h(()=>this.client.exists(this.userPwdKey(t)))}async changePassword(t,e){await h(()=>this.client.set(this.userPwdKey(t),e))}async deleteUser(t){await h(()=>this.client.del(this.userPwdKey(t))),await h(()=>this.client.del(this.shKey(t)));let e=`u:${t}:pr:*`,i=await h(()=>this.client.keys(e));i.length>0&&await h(()=>this.client.del(...i));let s=`u:${t}:fav:*`,r=await h(()=>this.client.keys(s));r.length>0&&await h(()=>this.client.del(...r));let a=`u:${t}:skip:*`,n=await h(()=>this.client.keys(a));n.length>0&&await h(()=>this.client.del(...n))}shKey(t){return`u:${t}:sh`}async getSearchHistory(t){return(await h(()=>this.client.lrange(this.shKey(t),0,-1))).map(t=>String(t))}async addSearchHistory(t,e){let i=this.shKey(t);await h(()=>this.client.lrem(i,0,o(e))),await h(()=>this.client.lpush(i,o(e))),await h(()=>this.client.ltrim(i,0,19))}async deleteSearchHistory(t,e){let i=this.shKey(t);e?await h(()=>this.client.lrem(i,0,o(e))):await h(()=>this.client.del(i))}async getAllUsers(){return(await h(()=>this.client.keys("u:*:pwd"))).map(t=>{let e=t.match(/^u:(.+?):pwd$/);return e?o(e[1]):void 0}).filter(t=>"string"==typeof t)}adminConfigKey(){return"admin:config"}async getAdminConfig(){return await h(()=>this.client.get(this.adminConfigKey()))||null}async setAdminConfig(t){await h(()=>this.client.set(this.adminConfigKey(),t))}skipConfigKey(t,e,i){return`u:${t}:skip:${e}+${i}`}async getSkipConfig(t,e,i){return await h(()=>this.client.get(this.skipConfigKey(t,e,i)))||null}async setSkipConfig(t,e,i,s){await h(()=>this.client.set(this.skipConfigKey(t,e,i),s))}async deleteSkipConfig(t,e,i){await h(()=>this.client.del(this.skipConfigKey(t,e,i)))}async getAllSkipConfigs(t){let e=`u:${t}:skip:*`,i=await h(()=>this.client.keys(e));if(0===i.length)return{};let s={},r=await h(()=>this.client.mget(i));return i.forEach((t,e)=>{let i=r[e];if(i){let e=t.match(/^u:.+?:skip:(.+)$/);e&&(s[e[1]]=i)}}),s}async clearAllData(){try{for(let t of(await this.getAllUsers()))await this.deleteUser(t);await h(()=>this.client.del(this.adminConfigKey())),console.log("所有数据已清空")}catch(t){throw console.error("清空数据失败:",t),Error("清空数据失败")}}}let g=process.env.NEXT_PUBLIC_STORAGE_TYPE||"localstorage",w=null;function u(t,e){return`${t}+${e}`}class d{constructor(){this.storage=(w||(w=function(){switch(g){case"redis":return new l;case"upstash":return new y;case"kvrocks":return new n;default:return null}}()),w)}async getPlayRecord(t,e,i){let s=u(e,i);return this.storage.getPlayRecord(t,s)}async savePlayRecord(t,e,i,s){let r=u(e,i);await this.storage.setPlayRecord(t,r,s)}async getAllPlayRecords(t){return this.storage.getAllPlayRecords(t)}async deletePlayRecord(t,e,i){let s=u(e,i);await this.storage.deletePlayRecord(t,s)}async getFavorite(t,e,i){let s=u(e,i);return this.storage.getFavorite(t,s)}async saveFavorite(t,e,i,s){let r=u(e,i);await this.storage.setFavorite(t,r,s)}async getAllFavorites(t){return this.storage.getAllFavorites(t)}async deleteFavorite(t,e,i){let s=u(e,i);await this.storage.deleteFavorite(t,s)}async isFavorited(t,e,i){return null!==await this.getFavorite(t,e,i)}async registerUser(t,e){await this.storage.registerUser(t,e)}async verifyUser(t,e){return this.storage.verifyUser(t,e)}async checkUserExist(t){return this.storage.checkUserExist(t)}async changePassword(t,e){await this.storage.changePassword(t,e)}async deleteUser(t){await this.storage.deleteUser(t)}async getSearchHistory(t){return this.storage.getSearchHistory(t)}async addSearchHistory(t,e){await this.storage.addSearchHistory(t,e)}async deleteSearchHistory(t,e){await this.storage.deleteSearchHistory(t,e)}async getAllUsers(){return"function"==typeof this.storage.getAllUsers?this.storage.getAllUsers():[]}async getAdminConfig(){return"function"==typeof this.storage.getAdminConfig?this.storage.getAdminConfig():null}async saveAdminConfig(t){"function"==typeof this.storage.setAdminConfig&&await this.storage.setAdminConfig(t)}async getSkipConfig(t,e,i){return"function"==typeof this.storage.getSkipConfig?this.storage.getSkipConfig(t,e,i):null}async setSkipConfig(t,e,i,s){"function"==typeof this.storage.setSkipConfig&&await this.storage.setSkipConfig(t,e,i,s)}async deleteSkipConfig(t,e,i){"function"==typeof this.storage.deleteSkipConfig&&await this.storage.deleteSkipConfig(t,e,i)}async getAllSkipConfigs(t){return"function"==typeof this.storage.getAllSkipConfigs?this.storage.getAllSkipConfigs(t):{}}async clearAllData(){if("function"==typeof this.storage.clearAllData)await this.storage.clearAllData();else throw Error("存储类型不支持清空数据操作")}}let f=new d}};